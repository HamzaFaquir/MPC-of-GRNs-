
function[J,P_main, u_l]=optimal_control_m(ti,tf,u_,P_j,P,Prot_mesh,n_op,nt_solve)

%%%%%%%%% MAIN optimal control PROBLEM%%%%%%%%%%%%%%%%%%
n_gene=1;


Time_mesh=[ti tf nt_solve 1];
T=linspace(ti,tf, nt_solve);


iN=cell(n_gene,1);
x=cell(n_gene,1);
for i=1:n_gene
    iN{i} = Prot_mesh(i,3) + 1;
    x{i} = linspace(Prot_mesh(i,1),Prot_mesh(i,2), iN{i});
end



%%%%GRadient_solve descent_solve optimization%%%%%%%%%%%%%%%%%%%%%%%%%%


u_k=u_*0;
u_l=u_;
alpha0=10^10;
kmax=60;
J=zeros(n_op,1);




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[du1Lix, P_main]=main_equ(ti,tf,nt_solve,Prot_mesh,u_l,P_j); %solution of the main problem 

[duLix,P_adj]=adjoint_f(Time_mesh,Prot_mesh,P_main,P,u_l); %calculate adjoint_solve solution

J(1)=cost_f(P_main,P,T,x);

%%%%%%%%%%%%Calculate gradient_solve of cost function%%%%%%%%%%%%%%%%%%%%%%%%%
Int_solveegral_1=zeros(nt_solve,1);

for i=1:nt_solve
    Int_solveegral_1(i)=trapz(x{1},(du1Lix{i}).*P_adj{i});
end 


dJ_u1=(Int_solveegral_1);

d1=-dJ_u1;

j=1;

upper_bound=300;
lower_bound=0;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Solve optimization problem 
while j<n_op 

[alpha]=Steplength_Backtracking_m(dJ_u1,Prot_mesh,nt_solve, ti,tf,u_k,u_l,alpha0,d1,J(j),kmax,P,P_j)
%update of inducers
u_k=u_l;

u_l=u_l+alpha.*d1;

u_b=u_l>upper_bound;
l_b=u_l<lower_bound;


u_l(u_b)=upper_bound;
u_l(l_b)=lower_bound;




Pk=P_main;

[du1Lix, P_main]=main_equ(ti,tf,nt_solve,Prot_mesh,u_l,P_j); %solution of the main problem 

%%%%%%%%%%%%Calculate gradient_solve of cost function%%%%%%%%%%%%%%%%%%%%%%%%%
J(j+1)=cost_f(P_main,P,T,x)

if isnan(J(j+1)) 
     u_l=u_k;
    P_main=Pk;
    disp('Nan Value')
    break 
elseif norm(dJ_u1)==0 
    u_l=u_k;
    P_main=Pk;
    disp('Null gradient')
    break 
elseif J(j+1)<J(1)*10^(-5)
    disp('Tolerance reached')
break
elseif J(j+1)>=J(j)
    u_l=u_k;
    P_main=Pk;
    disp('No decrease')
    break 
end


[duLix,P_adj]=adjoint_f(Time_mesh,Prot_mesh,P_main,P,u_l);

Int_solveegral_1=zeros(nt_solve,1);

for i=1:nt_solve
    Int_solveegral_1(i)=trapz(x{1},(du1Lix{i}).*P_adj{i});
end 



g_1k=dJ_u1;


dJ_u1=(Int_solveegral_1);

g_1l=dJ_u1;

yk1=g_1l-g_1k;



%{

L2=(g_1l.*yk1);
L1=(g_1k.*g_1k);

beta=L2./L1;

beta(beta<0)=0;

L2=trapz(T,g_1l.*yk1);
L1=trapz(T,g_1k.*g_1k);

beta=L2./L1;

beta=max(beta,0)

%}

L2=trapz(T,d1.*yk1);
L1=(1/L2)*(yk1-2*d1.*trapz(T,y_1k.*y_1k)/L2);

beta=trapz(T,)


d1=-g_1l+beta.*d1;



j=j+1
end 









end 



